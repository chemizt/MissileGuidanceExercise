name: Common Build And Deploy

on:
  workflow_call:
    inputs:
      build-for:
        required: true
        type:     string
      build-for-flair:
        required: true
        type:     string
      build-with:
        required: true
        type:     string
      cmake-generator:
        required: true
        type:     string
      runner-os:
        required: true
        type:     string

env:
  QT_VERSION:       "6.4.3"
  CMAKE_BUILD_TYPE: MinSizeRel
  BIN_OUTPUT_DIR:   ${{ github.workspace }}/out
  CMAKE_CONF_DIR:   ${{ github.workspace }}/build
  STAGING_DIR:      ${{ github.workspace }}/artifacts

jobs:
  build:
    runs-on: ${{ inputs.runner-os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          host:     ${{ inputs.build-for }}
          version:  ${{ env.QT_VERSION }}
          arch:     ${{ inputs.build-with }}
          dir:      ${{ github.workspace }}/qt
          cache:    true

      - name: Configure the CMake project
        env:
          CMAKE_PREFIX_PATH: ${{ github.workspace }}/qt/Qt/${{ env.QT_VERSION }}/${{ inputs.build-with }}
        run: cmake -G "${{ inputs.cmake-generator }}" -B ${{ env.CMAKE_CONF_DIR }} -DCUSTOM_BIN_OUTPUT_ROOT=${{ env.BIN_OUTPUT_DIR }} -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}

      - name: Build the project
        run: cmake --build ${{ env.CMAKE_CONF_DIR }} --config ${{ env.CMAKE_BUILD_TYPE }}

      - name: Deploy the program
        run: |
          mkdir '${{ env.STAGING_DIR }}'
          shopt -s globstar

          if ${{ inputs.build-for == 'windows' }}
          then
            cd '${{ env.STAGING_DIR }}'
            cp '${{ env.BIN_OUTPUT_DIR }}/MGE64.exe' ./
            windeployqt --compiler-runtime --qmldir ${{ github.workspace }} MGE64.exe
          else
            cp -r ${{ env.BIN_OUTPUT_DIR }}/* ${{ env.STAGING_DIR }}/
          fi
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "MGE for ${{ inputs.build-for-flair }}"
          path: ${{ env.STAGING_DIR }}
